{"version":3,"sources":["helpers.js","aaaDataFromScraper.js","detailPanel.js","nft.js","getContractAddress.js","callOpensea.js","mainPage.js","singleNftView.js","IdsPage.js","TraitsPage.js","UniqueTraitsPage.js","App.js","reportWebVitals.js","index.js"],"names":["openInNewTab","url","newWindow","window","open","opener","roundToDecimal","num","Math","round","makePercent","val","total","nftRarityData","JSON","parse","stringify","jsonDataRarity","traitsMap","jsonAttributes","DetailPanel","props","nft","className","title","showRank","showLabel","rank","Object","keys","attributes","map","currTrait","i","currValue","toString","length","to","NFT","showAllAttributeText","price","lastSale","id","onClick","openseaUrl","alt","src","image","image_url","contractAddress","nftData","split","parseContractAddress","handleErrors","response","status","Error","type","getOpenseaData","tokenIds","fetch","join","tokenIdsQuery","then","json","data","assets","nftsOnOpensea","values","sellOrders","token_id","sell_orders","filter","order","maker","address","owner","o","current_price","pow","last_sale","total_price","catch","err","console","log","App","trait","match","params","attributeValue","useState","links","setLinks","toggleShowAllAttributeText","shouldFilterForBuyNow","toggleShouldFilterForBuyNow","shouldFilterForUnderEth","toggleShouldFilterForUnderEth","maxShow","setMaxShow","maxLinksBatchOffPage","attributeName","filteredNftData","n","possibleNumber","parseInt","isNaN","includes","priceData","setPriceData","useEffect","getOsPriceData","newMaxShow","a","nftIds","slice","d","osPriceData","iters","startId","r","push","rangeFrom","openOpenseaPage","displayRarityStatus","reversePercentile","rareStatus","SingleNftView","thisNft","find","lastSaleData","setLastSaleData","IdsPage","nfts","sort","b","showTraitsList","traitValues","currentTrait","showAllTraitValues","maxShowCount","fullTraitsList","count","TraitsPage","traits","toggleShowAllTraitValues","RarestTraitsPage","ids","maxTraitFrequencyInCollection","rarestTraits","idsWithRarestTraits","Set","attr","forEach","add","Array","from","getRarestTraits","nftsToUse","path","component","UniqueTraitsPage","exact","MainPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.310ae8e1.chunk.js","sourcesContent":["export const openInNewTab = (url) => {\n  const newWindow = window.open(url, '_blank', 'noopener,noreferrer');\n  if (newWindow) newWindow.opener = null;\n};\n\nexport const roundToDecimal = (num) => Math.round(num * 1000) / 1000;\n\nexport const makePercent = (val, total) => roundToDecimal((100 * val) / total);\n","\nimport jsonDataRarity from './jsonData/sadGirlsBar/raritySorted.json';\nimport jsonAttributes from './jsonData/sadGirlsBar/attributes.json';\n\nexport const nftRarityData = JSON.parse(JSON.stringify(jsonDataRarity));\nexport const traitsMap = JSON.parse(JSON.stringify(jsonAttributes));\n","import { Link } from 'react-router-dom';\nimport { traitsMap, nftRarityData } from './aaaDataFromScraper';\nimport { makePercent } from './helpers';\n\nfunction DetailPanel(props) {\n  const {\n    nft,\n    className = '',\n    title = null,\n    showRank = false,\n    showLabel = false,\n  } = props;\n  return (\n    <div className={className}>\n      {title}\n      {showRank && <p>Rank: {nft.rank}</p>}\n      {Object.keys(nft.attributes).map((currTrait, i) => {\n        const currValue = nft.attributes[currTrait].toString();\n        return (\n          <div className='traitKeyValue' key={`${currTrait}-${currValue}-${i}`}>\n            {showLabel && <p className='label'>{currTrait}</p>}\n            <p className='value'>\n              {traitsMap &&\n                traitsMap[currTrait] &&\n                traitsMap[currTrait][currValue] &&\n                nftRarityData &&\n                makePercent(\n                  traitsMap[currTrait][currValue].length,\n                  nftRarityData.length\n                )}\n              % -{' '}\n              <Link to={`/trait/${currTrait}/${currValue}`}>{currValue}</Link>\n            </p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default DetailPanel;\n","import { openInNewTab } from './helpers';\nimport { Link } from 'react-router-dom';\nimport ReactTooltip from 'react-tooltip';\nimport DetailPanel from './detailPanel';\nimport { roundToDecimal } from './helpers';\nimport { nftRarityData } from './aaaDataFromScraper';\n\nconst NFT = (props) => {\n  const {\n    nft,\n    showAllAttributeText = false,\n    title = null,\n    className = '',\n    price,\n    lastSale,\n  } = props;\n\n  return (\n    <div key={nft.id} className={`nftDiv ${className}`}>\n      {title ? (\n        title\n      ) : (\n        <Link to={`/id/${nft.id}`}>\n          <h3 className={nft.rank < nftRarityData.length / 5 ? 'green' : 'red'}>\n            {nft.id}\n          </h3>\n        </Link>\n      )}{' '}\n      <div\n        onClick={() => openInNewTab(nft.openseaUrl)}\n        data-tip\n        data-for='nftImgOpensea'\n      >\n        <img alt={nft.id} className='nft' src={nft.image || nft.image_url} />\n      </div>\n      <ReactTooltip id='nftImgOpensea' aria-haspopup='true'>\n        <span>🔗 Opensea</span>\n      </ReactTooltip>\n      <h5 className={'save-space-top save-space-bottom'}>\n        {price ? roundToDecimal(price) + ' ETH' : '-'}\n      </h5>\n      {lastSale && (\n        <p className='bold save-space-top'>\n          Last sale: {roundToDecimal(lastSale)} ETH\n        </p>\n      )}\n      {showAllAttributeText && <DetailPanel nft={nft} showRank />}\n    </div>\n  );\n};\n\nexport default NFT;\n","import { nftRarityData } from './aaaDataFromScraper';\n\nconst parseContractAddress = (nftData) => {\n  if (nftData) {\n    const [, addressAndId] = nftData.openseaUrl.split('assets/');\n    return addressAndId.split('/')[0];\n  }\n  return null;\n};\n\nexport const contractAddress = parseContractAddress(nftRarityData[0]);\n","import { contractAddress } from './getContractAddress';\nfunction handleErrors(response) {\n  if (!response.status === 200) {\n    throw Error({\n      type: 'ERROR',\n      ...response,\n    });\n  }\n  return response;\n}\n\nconst tokenIdsQuery = (tokenIds) =>\n  tokenIds && tokenIds.length\n    ? tokenIds.map((id) => `token_ids=${id}`).join('&') + '&'\n    : '';\n\nconst url = (tokenIds) =>\n  `https://api.opensea.io/api/v1/assets?${tokenIdsQuery(\n    tokenIds\n  )}asset_contract_address=${contractAddress}&order_direction=desc&offset=0&limit=30`;\n\nexport const getOpenseaData = (tokenIds) => {\n  return fetch(url(tokenIds))\n    .then(handleErrors)\n    .then((response) => response.json())\n    .then((data) => {\n      if (data && data.assets) {\n        const nftsOnOpensea = Object.values(data.assets);\n        const sellOrders = {};\n        for (let nft of nftsOnOpensea) {\n          sellOrders[nft.token_id] = {\n            id: nft.token_id,\n            sell_orders:\n              nft.sell_orders &&\n              nft.sell_orders\n                .filter((order) => {\n                  return order.maker.address === nft.owner.address;\n                })\n                .map((o) => o.current_price / Math.pow(10, 18)),\n            last_sale:\n              nft.last_sale &&\n              nft.last_sale.total_price &&\n              nft.last_sale.total_price / Math.pow(10, 18),\n          };\n        }\n        return sellOrders;\n      } else {\n        return ['error loading'];\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n","import './App.css';\nimport { useState, useEffect } from 'react';\nimport NFT from './nft';\n\nimport { openInNewTab } from './helpers';\nimport { traitsMap, nftRarityData } from './aaaDataFromScraper';\nimport { getOpenseaData } from './callOpensea';\nimport { makePercent } from './helpers';\n\nconst rangeFrom = (startId, length) => {\n  const r = [];\n  for (let i = startId; i < startId + length; i++) {\n    r.push(i);\n  }\n  return r;\n};\n\nfunction App(props) {\n  const trait = props?.match?.params?.trait;\n  const attributeValue = props?.match?.params?.val;\n  const [links, setLinks] = useState(0);\n  const [showAllAttributeText, toggleShowAllAttributeText] = useState(false);\n  const [shouldFilterForBuyNow, toggleShouldFilterForBuyNow] = useState(false);\n  const [shouldFilterForUnderEth, toggleShouldFilterForUnderEth] =\n    useState(false);\n  const [maxShow, setMaxShow] = useState(30);\n  const [maxLinksBatchOffPage] = useState(5);\n  const attributeName = trait || null;\n\n  const filteredNftData = attributeName\n    ? nftRarityData.filter((n) => {\n        if (attributeValue) {\n          const possibleNumber = parseInt(attributeValue);\n          const val = isNaN(possibleNumber) ? attributeValue : possibleNumber;\n          return (\n            !!n.attributes[attributeName] &&\n            n.attributes[attributeName].includes(val)\n          );\n        } else {\n          return !!n.attributes[attributeName];\n        }\n      })\n    : nftRarityData;\n\n  const openOpenseaPage = (n) => {\n    const iters = rangeFrom(n, maxLinksBatchOffPage);\n    for (let i of iters) {\n      if (filteredNftData[i]) {\n        openInNewTab(filteredNftData[i].openseaUrl);\n      }\n    }\n    setLinks(n + maxLinksBatchOffPage);\n  };\n\n  const [priceData, setPriceData] = useState(null);\n\n  useEffect(() => {\n    if (!priceData) {\n      getOsPriceData(maxShow);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!priceData) {\n      getOsPriceData(maxShow);\n    }\n    getOsPriceData(maxShow);\n  }, [maxShow, shouldFilterForBuyNow, attributeName, attributeValue]);\n\n  const getOsPriceData = async (newMaxShow) => {\n    const nftIds =\n      filteredNftData &&\n      filteredNftData\n        .slice(0, newMaxShow)\n        .filter((nft) => !priceData || !priceData[nft.id])\n        .map((d) => d.id);\n    const osPriceData = await getOpenseaData(nftIds);\n    setPriceData({ ...priceData, ...osPriceData });\n  };\n\n  return (\n    <div className='App'>\n      <div className='section-top'>\n        <div className='section-title'>\n          <h2 className='save-space-bottom'>\n            {trait || 'Top Ranked NFTs'}\n            {attributeValue && `: ${attributeValue}`}\n            {trait && attributeValue && nftRarityData && (\n              <span>\n                {' '}\n                (\n                {makePercent(\n                  traitsMap[trait][attributeValue].length,\n                  nftRarityData.length\n                )}\n                %)\n              </span>\n            )}\n          </h2>\n          {attributeValue &&\n            traitsMap &&\n            trait &&\n            traitsMap[trait] &&\n            attributeValue &&\n            traitsMap[trait][attributeValue] &&\n            nftRarityData && (\n              <h4 className='save-space-top'>\n                {traitsMap[trait][attributeValue].length} /{' '}\n                {nftRarityData.length}\n              </h4>\n            )}\n        </div>\n\n        <div className='section-settings'>\n          <button\n            className='button_slide slide_in'\n            onClick={() => toggleShouldFilterForBuyNow(!shouldFilterForBuyNow)}\n          >\n            {shouldFilterForBuyNow ? 'Include unlisted' : 'Buy now'}\n          </button>\n          <button\n            className='button_slide slide_in'\n            onClick={() =>\n              toggleShouldFilterForUnderEth(!shouldFilterForUnderEth)\n            }\n          >\n            {shouldFilterForUnderEth ? 'Include > 1 ETH' : '<= 1 ETH'}\n          </button>\n\n          <button\n            className='button_slide slide_in'\n            onClick={() => openOpenseaPage(links)}\n          >\n            Opensea {links + 1} to {links + maxLinksBatchOffPage}\n          </button>\n          <button\n            className='button_slide slide_in'\n            onClick={() => toggleShowAllAttributeText(!showAllAttributeText)}\n          >\n            {showAllAttributeText ? 'Hide' : 'Show'} details\n          </button>\n        </div>\n      </div>\n\n      <div className='nfts'>\n        {filteredNftData && filteredNftData.length ? (\n          filteredNftData\n            .filter((nft) =>\n              shouldFilterForBuyNow\n                ? !!priceData &&\n                  !!priceData[nft.id] &&\n                  !!priceData[nft.id].sell_orders\n                : true\n            )\n            .filter((nft) =>\n              shouldFilterForUnderEth\n                ? !!priceData &&\n                  !!priceData[nft.id] &&\n                  !!priceData[nft.id].sell_orders &&\n                  priceData[nft.id].sell_orders <= 1\n                : true\n            )\n            .slice(0, maxShow)\n            .map((nft, i) => (\n              <NFT\n                nft={nft}\n                showAllAttributeText={showAllAttributeText}\n                trait={trait}\n                price={\n                  priceData &&\n                  priceData[nft.id] &&\n                  priceData[nft.id].sell_orders\n                }\n                lastSale={\n                  priceData && priceData[nft.id] && priceData[nft.id].last_sale\n                }\n              />\n            ))\n        ) : (\n          <div>No matches found</div>\n        )}\n      </div>\n      {filteredNftData.length > maxShow && (\n        <button\n          className='button_slide slide_in width-100'\n          onClick={() => {\n            const newMaxShow = maxShow + 30;\n            setMaxShow(newMaxShow);\n          }}\n        >\n          Query 30 more\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\nimport NFT from './nft';\nimport DetailPanel from './detailPanel';\nimport { nftRarityData } from './aaaDataFromScraper';\n\nimport { getOpenseaData } from './callOpensea';\nimport { roundToDecimal, makePercent } from './helpers';\n\nconst displayRarityStatus = (rank, total) => {\n  const reversePercentile = makePercent(rank, total);\n  let rareStatus = '🚯 Common';\n  if (reversePercentile < 10) {\n    rareStatus = '🤑 Most rare';\n  } else if (reversePercentile < 25) {\n    rareStatus = '💰 Rare';\n  } else if (reversePercentile < 50) {\n    rareStatus = '😐 Above average';\n  }\n  return (\n    <h3>\n      {rareStatus} -{' '}\n      {reversePercentile < 50\n        ? `top ${reversePercentile}`\n        : `bottom ${100 - reversePercentile}`}\n      %\n    </h3>\n  );\n};\n\nfunction SingleNftView(props) {\n  const id = props.match.params.id;\n  const thisNft = nftRarityData.find((nft) => nft.id === parseInt(id));\n\n  const [priceData, setPriceData] = useState(null);\n  const [lastSaleData, setLastSaleData] = useState(null);\n\n  useEffect(() => {\n    if (!priceData) {\n      getOsPriceData();\n    }\n  }, []);\n\n  const getOsPriceData = async () => {\n    const osPriceData = await getOpenseaData([thisNft.id]);\n    setPriceData(osPriceData[thisNft.id].sell_orders);\n    setLastSaleData(osPriceData[thisNft.id].last_sale);\n  };\n\n  return (\n    thisNft && (\n      <div className='singleNft'>\n        <NFT\n          className='singleNftView'\n          nft={thisNft}\n          price={priceData}\n          lastSale={lastSaleData}\n          title={\n            <h2>\n              {thisNft.id} - #{thisNft.rank} / {nftRarityData.length}\n            </h2>\n          }\n        />\n        <DetailPanel\n          nft={thisNft}\n          className='nftDiv singleNftView singleNftViewDetailPanel'\n          title={displayRarityStatus(thisNft.rank, nftRarityData.length)}\n          showLabel\n        />\n      </div>\n    )\n  );\n}\n\nexport default SingleNftView;\n","import { Link } from 'react-router-dom';\nimport { nftRarityData } from './aaaDataFromScraper';\n\nfunction IdsPage() {\n  const nfts = [...nftRarityData];\n  return (\n    <>\n      <h2>Find NFT by ID</h2>\n      <ul>\n        {nfts\n          .sort(function (a, b) {\n            return a.id - b.id;\n          })\n          .map((nft) => (\n            <Link to={`/id/${nft.id}`}>\n              <li>{nft.id}</li>\n            </Link>\n          ))}\n      </ul>\n    </>\n  );\n}\nexport default IdsPage;\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { traitsMap } from './aaaDataFromScraper';\n\nconst showTraitsList = (\n  traitValues,\n  currentTrait,\n  showAllTraitValues,\n  maxShowCount\n) => {\n  const fullTraitsList = traitValues\n    .map((val) => ({ val, count: traitsMap[currentTrait][val].length }))\n    .sort(function (a, b) {\n      return a.count - b.count;\n    })\n    .map(({ val, count }) => (\n      <li key={`${currentTrait}-${val}-${count}`}>\n        <Link to={`/trait/${currentTrait}/${val}`}>{val}</Link>: {count}\n      </li>\n    ));\n\n  return (\n    <ul>\n      {showAllTraitValues\n        ? fullTraitsList\n        : fullTraitsList.slice(0, maxShowCount)}\n    </ul>\n  );\n};\n\nfunction TraitsPage() {\n  const traits = Object.keys(traitsMap);\n  const [showAllTraitValues, toggleShowAllTraitValues] = useState(false);\n  const [maxShowCount] = useState(10);\n\n  return (\n    <div>\n      <div className='section-top'>\n        <div className='section-title'>\n          <h2>NFT by Trait</h2>\n        </div>\n\n        <div className='section-settings'>\n          <button\n            className='button_slide slide_in'\n            onClick={() => toggleShowAllTraitValues(!showAllTraitValues)}\n          >\n            {showAllTraitValues\n              ? `Only show top ${maxShowCount} values`\n              : 'Show all values'}\n          </button>\n        </div>\n      </div>\n\n      <div className='flex'>\n        {traits.map((trait) => {\n          const traitValues = Object.keys(traitsMap[trait]);\n          return (\n            <div className='column-trait' key={trait}>\n              <h3>{trait}</h3>\n              {showTraitsList(\n                traitValues,\n                trait,\n                showAllTraitValues,\n                maxShowCount\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\nexport default TraitsPage;\n","import { useState, useEffect } from 'react';\nimport { traitsMap, nftRarityData } from './aaaDataFromScraper';\nimport NFT from './nft';\nimport { getOpenseaData } from './callOpensea';\n\nconst getRarestTraits = (maxTraitFrequencyInCollection) => {\n  const rarestTraits = {};\n  const idsWithRarestTraits = new Set();\n  const attributes = Object.keys(traitsMap);\n  for (let attr of attributes) {\n    const values = Object.keys(traitsMap[attr]);\n    for (let val of values) {\n      if (\n        traitsMap &&\n        traitsMap[attr] &&\n        traitsMap[attr][val] &&\n        traitsMap[attr][val].length <= maxTraitFrequencyInCollection\n      ) {\n        traitsMap[attr][val].forEach(\n          idsWithRarestTraits.add,\n          idsWithRarestTraits\n        );\n        if (!rarestTraits[attr]) {\n          rarestTraits[attr] = {\n            ...rarestTraits[attr],\n            [val]: traitsMap[attr][val],\n          };\n        } else {\n          rarestTraits[attr] = { [val]: traitsMap[attr][val] };\n        }\n      }\n    }\n  }\n  return { ids: Array.from(idsWithRarestTraits), rarestTraits };\n};\n\nfunction RarestTraitsPage(props) {\n  const n = (props.match && props.match.params.n) || 1;\n  const { ids } = getRarestTraits(n);\n\n  const nftsToUse = ids\n    .map((id) => nftRarityData.find((n) => n.id == id))\n    .sort(function (a, b) {\n      return a.rank - b.rank;\n    })\n    .slice(0, 30);\n\n  const [priceData, setPriceData] = useState(null);\n\n  useEffect(() => {\n    if (!priceData) {\n      getOsPriceData();\n    }\n  }, []);\n\n  const getOsPriceData = async () => {\n    const osPriceData = await getOpenseaData(nftsToUse.map((nft) => nft.id));\n    console.log(osPriceData);\n    setPriceData({ ...priceData, ...osPriceData });\n  };\n\n  return (\n    <>\n      <div>\n        <div className='section-top'>\n          <div className='section-title'>\n            <h2>\n              NFTs with 1 of {n} traits ({ids.length})\n            </h2>\n          </div>\n        </div>\n      </div>\n      <div className='nfts'>\n        {nftsToUse.map((nft) => (\n          <NFT\n            key={nft.id}\n            nft={nft}\n            // showAllAttributeText={true}\n            price={\n              priceData && priceData[nft.id] && priceData[nft.id].sell_orders\n            }\n            lastSale={\n              priceData && priceData[nft.id] && priceData[nft.id].last_sale\n            }\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default RarestTraitsPage;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport MainPage from './mainPage';\nimport SingleNftView from './singleNftView';\nimport IdsPage from './IdsPage';\nimport TraitsPage from './TraitsPage';\nimport UniqueTraitsPage from './UniqueTraitsPage';\n// import NewPage from './NewPage';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to='/'>📈 Top Ranked NFTs</Link>\n            </li>\n            <li>\n              <Link to='/oneOf/1'>🥇 1 of 1 Traits</Link>\n            </li>\n            <li className='glitch'>\n              <Link to='/trait'>👀 NFT by Trait</Link>\n            </li>\n            <li className='glitch'>\n              <Link to='/id'>🔍 Find NFT by ID</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <div className='page'>\n          <Switch>\n            <Route path='/oneOf/:n' component={UniqueTraitsPage} exact />\n            <Route path='/id/:id' component={SingleNftView} />\n            <Route path='/id' component={IdsPage} exact />\n            <Route path='/trait/:trait/:val' component={MainPage} />\n            <Route path='/trait' component={TraitsPage} exact />\n            {/* <Route path='/omg'>\n              <NewPage />\n            </Route> */}\n            <Route path='/'>\n              <MainPage />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}